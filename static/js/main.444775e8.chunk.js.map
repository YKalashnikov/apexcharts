{"version":3,"sources":["components/Bar.js","components/Heatmap.js","components/Line.js","components/Scatter.js","components/Area.js","components/Donut.js","App.js","serviceWorker.js","index.js"],"names":["Graph","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","options","chart","background","foreColor","xaxis","categories","plotOptions","bar","horizontal","fill","colors","dataLabels","enabled","title","text","align","margin","offsetY","style","fontSize","series","name","data","setState","objectSpread","react_default","a","createElement","react_apexcharts_min_default","type","height","width","onClick","bind","Component","Heatmap","heatmap","Donut","donut","line","Scatter","scatter","Area","area","labels","App","className","Bar","components_Heatmap","Line","components_Scatter","components_Area","components_Donut","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.444775e8.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport Chart from 'react-apexcharts';\n\nclass Graph extends Component {\n    constructor(props){\n        super(props)\n        this.state = {\n            options: {\n                chart: {\n                    background: \"#f4f4f4\",\n                    foreColor: \"#333\"\n                  },\n                  xaxis: {\n                      categories: [\n                        \"New York\",\n                        \"Los Angeles\",\n                        \"Chicago\",\n                        \"Houston\",\n                        \"Philadelphia\",\n                        \"Phoenix\",\n                        \"San Antonio\",\n                        \"San Diego\",\n                        \"Dallas\",\n                        \"San Jose\"\n                      ]\n                  },\n                  plotOptions: {\n                    bar: {\n                      horizontal: false\n                    }\n                  },\n                  fill: {\n                    colors: [\"#F44336\"]\n                  },\n                  dataLabels: {\n                    enabled: false\n                  },\n                  title: {\n                    text: \"Largest US Cities By Population\",\n                    align: \"center\",\n                    margin: 20,\n                    offsetY: 20,\n                    style: {\n                      fontSize: \"25px\"\n                    }\n                  }\n                  },\n                  series: [ \n                  {\n                  name: \"Population\",\n                  data: [\n                    8550405,\n                    3971883,\n                    2720546,\n                    2296224,\n                    1567442,\n                    1563025,\n                    1469845,\n                    1394928,\n                    1300092,\n                    1026908\n                  ]\n                }\n            ]\n            }\n            \n        }\n        onClick() {\n            this.setState({\n               options: {...this.state.options,\n               plotOptions: {...this.state.plotOptions,\n               bar:\n                {...this.state.options.plotOptions.bar,\n               horizontal: true\n           }\n        }\n          }\n            })\n           }\n    \n    \n    render() {\n        return ( \n            <div>\n              <Chart \n              options = {this.state.options}\n              series = {this.state.series}\n              type = \"bar\"\n              height = \"450\"\n              width = \"100%\"\n              \n        />\n           <button onClick = {this.onClick.bind(this)}>Horizontal</button>\n           </div>\n        );\n    }\n}\nexport default Graph;","import React, { Component } from 'react';\nimport Chart from 'react-apexcharts';\n\nclass Heatmap extends Component {\n    constructor(props){\n        super(props)\n        this.state = {\n            options: {\n                chart: {\n                    background: \"#f4f4f4\",\n                    foreColor: \"#333\"\n                  },\n                  xaxis: {\n                      categories: [\n                        \"New York\",\n                        \"Los Angeles\",\n                        \"Chicago\",\n                        \"Houston\",\n                        \"Philadelphia\",\n                        \"Phoenix\",\n                        \"San Antonio\",\n                        \"San Diego\",\n                        \"Dallas\",\n                        \"San Jose\"\n                      ]\n                  },\n                  plotOptions: {\n                    heatmap: {\n                      horizontal: false\n                    }\n                  },\n                  fill: {\n                    colors: [\"#F44336\"]\n                  },\n                  dataLabels: {\n                    enabled: false\n                  },\n                  title: {\n                    text: \"Largest US Cities By Population\",\n                    align: \"center\",\n                    margin: 20,\n                    offsetY: 20,\n                    style: {\n                      fontSize: \"25px\"\n                    }\n                  }\n                  },\n                  series: [ \n                  {\n                  name: \"Population\",\n                  data: [\n                    8550405,\n                    3971883,\n                    2720546,\n                    2296224,\n                    1567442,\n                    1563025,\n                    1469845,\n                    1394928,\n                    1300092,\n                    1026908\n                  ]\n                }\n            ]\n            }\n            \n        }\n        onClick() {\n            this.setState({\n               options: {...this.state.options,\n               plotOptions: {...this.state.plotOptions,\n               heatmap:\n                {...this.state.options.plotOptions.heatmap,\n               horizontal: true\n           }\n        }\n          }\n            })\n           }\n    \n    \n    render() {\n        return ( \n            <div>\n              <Chart \n              options = {this.state.options}\n              series = {this.state.series}\n              type = \"heatmap\"\n              height = \"450\"\n              width = \"100%\"\n              \n        />\n           <button onClick = {this.onClick.bind(this)}>Horizontal</button>\n           </div>\n        );\n    }\n}\nexport default Heatmap;","import React, { Component } from 'react';\nimport Chart from 'react-apexcharts';\n\nclass Donut extends Component {\n    constructor(props){\n        super(props)\n        this.state = {\n            options: {\n                chart: {\n                    background: \"#f4f4f4\",\n                    foreColor: \"#333\"\n                  },\n                  xaxis: {\n                      categories: [\n                        \"New York\",\n                        \"Los Angeles\",\n                        \"Chicago\",\n                        \"Houston\",\n                        \"Philadelphia\",\n                        \"Phoenix\",\n                        \"San Antonio\",\n                        \"San Diego\",\n                        \"Dallas\",\n                        \"San Jose\"\n                      ]\n                  },\n                  plotOptions: {\n                    donut: {\n                      horizontal: false\n                    }\n                  },\n                  fill: {\n                    colors: [\"#F44336\"]\n                  },\n                  dataLabels: {\n                    enabled: false\n                  },\n                  title: {\n                    text: \"Largest US Cities By Population\",\n                    align: \"center\",\n                    margin: 20,\n                    offsetY: 20,\n                    style: {\n                      fontSize: \"25px\"\n                    }\n                  }\n                  },\n                  series: [ \n                  {\n                  name: \"Population\",\n                  data: [\n                    8550405,\n                    3971883,\n                    2720546,\n                    2296224,\n                    1567442,\n                    1563025,\n                    1469845,\n                    1394928,\n                    1300092,\n                    1026908\n                  ]\n                }\n            ]\n            }\n            \n        }\n        onClick() {\n            this.setState({\n               options: {...this.state.options,\n               plotOptions: {...this.state.plotOptions,\n                line:\n                {...this.state.options.plotOptions.line,\n               horizontal: true\n           }\n        }\n          }\n            })\n           }\n    \n    \n    render() {\n        return ( \n            <div>\n              <Chart \n              options = {this.state.options}\n              series = {this.state.series}\n              type = \"line\"\n              height = \"450\"\n              width = \"100%\"\n              \n        />\n           <button onClick = {this.onClick.bind(this)}>Horizontal</button>\n           </div>\n        );\n    }\n}\nexport default Donut;","import React, { Component } from 'react';\nimport Chart from 'react-apexcharts';\n\nclass Scatter extends Component {\n    constructor(props){\n        super(props)\n        this.state = {\n            options: {\n                chart: {\n                    background: \"#f4f4f4\",\n                    foreColor: \"#333\"\n                  },\n                  xaxis: {\n                      categories: [\n                        \"New York\",\n                        \"Los Angeles\",\n                        \"Chicago\",\n                        \"Houston\",\n                        \"Philadelphia\",\n                        \"Phoenix\",\n                        \"San Antonio\",\n                        \"San Diego\",\n                        \"Dallas\",\n                        \"San Jose\"\n                      ]\n                  },\n                  plotOptions: {\n                    scatter: {\n                      horizontal: false\n                    }\n                  },\n                  fill: {\n                    colors: [\"#F44336\"]\n                  },\n                  dataLabels: {\n                    enabled: false\n                  },\n                  title: {\n                    text: \"Largest US Cities By Population\",\n                    align: \"center\",\n                    margin: 20,\n                    offsetY: 20,\n                    style: {\n                      fontSize: \"25px\"\n                    }\n                  }\n                  },\n                  series: [ \n                  {\n                  name: \"Population\",\n                  data: [\n                    8550405,\n                    3971883,\n                    2720546,\n                    2296224,\n                    1567442,\n                    1563025,\n                    1469845,\n                    1394928,\n                    1300092,\n                    1026908\n                  ]\n                }\n            ]\n            }\n            \n        }\n        onClick() {\n            this.setState({\n               options: {...this.state.options,\n               plotOptions: {...this.state.plotOptions,\n                scatter:\n                {...this.state.options.plotOptions.scatter,\n               horizontal: true\n           }\n        }\n          }\n            })\n           }\n    \n    \n    render() {\n        return ( \n            <div>\n              <Chart \n              options = {this.state.options}\n              series = {this.state.series}\n              type = \"scatter\"\n              height = \"450\"\n              width = \"100%\"\n              \n        />\n           <button onClick = {this.onClick.bind(this)}>Horizontal</button>\n           </div>\n        );\n    }\n}\nexport default Scatter;","import React, { Component } from 'react';\nimport Chart from 'react-apexcharts';\n\nclass Area extends Component {\n    constructor(props){\n        super(props)\n        this.state = {\n            options: {\n                chart: {\n                    background: \"#f4f4f4\",\n                    foreColor: \"#333\"\n                  },\n                  xaxis: {\n                      categories: [\n                        \"New York\",\n                        \"Los Angeles\",\n                        \"Chicago\",\n                        \"Houston\",\n                        \"Philadelphia\",\n                        \"Phoenix\",\n                        \"San Antonio\",\n                        \"San Diego\",\n                        \"Dallas\",\n                        \"San Jose\"\n                      ]\n                  },\n                  plotOptions: {\n                    area: {\n                      horizontal: false\n                    }\n                  },\n                  fill: {\n                    colors: [\"#F44336\"]\n                  },\n                  dataLabels: {\n                    enabled: false\n                  },\n                  title: {\n                    text: \"Largest US Cities By Population\",\n                    align: \"center\",\n                    margin: 20,\n                    offsetY: 20,\n                    style: {\n                      fontSize: \"25px\"\n                    }\n                  }\n                  },\n                  series: [ \n                  {\n                  name: \"Population\",\n                  data: [\n                    8550405,\n                    3971883,\n                    2720546,\n                    2296224,\n                    1567442,\n                    1563025,\n                    1469845,\n                    1394928,\n                    1300092,\n                    1026908\n                  ]\n                }\n            ]\n            }\n            \n        }\n        onClick() {\n            this.setState({\n               options: {...this.state.options,\n               plotOptions: {...this.state.plotOptions,\n                area:\n                {...this.state.options.plotOptions.area,\n               horizontal: true\n           }\n        }\n          }\n            })\n           }\n    \n    \n    render() {\n        return ( \n            <div>\n              <Chart \n              options = {this.state.options}\n              series = {this.state.series}\n              type = \"area\"\n              height = \"450\"\n              width = \"100%\"\n              \n        />\n           </div>\n        );\n    }\n}\nexport default Area;","import React, { Component } from 'react';\nimport Chart from 'react-apexcharts';\n\nclass Donut extends Component {\n    constructor(props){\n        super(props)\n        \n        this.state = {\n            options: {\n                  title: {\n                    text: \"Largest US Cities By Population\",\n                    align: \"center\",\n                    margin: 20,\n                    offsetY: 20,\n                    style: {\n                      fontSize: \"25px\"\n                    }\n                  }\n                  },\n            series: [\n                8550405,\n                3971883,\n                2720546,\n                2296224,\n                1567442,\n                1563025,\n                1469845,\n                1394928,\n                1300092,\n                1026908]\n                ,\n            labels: [  \"New York\",\n            \"Los Angeles\",\n            \"Chicago\",\n            \"Houston\",\n            \"Philadelphia\",\n            \"Phoenix\",\n            \"San Antonio\",\n            \"San Diego\",\n            \"Dallas\",\n            \"San Jose\"]\n          }\n        }\n   \n    \n    render() {\n        return ( \n            <div>\n              <Chart \n              options = {this.state.options}\n              series = {this.state.series}\n              type = \"donut\"\n              width = \"50%\"\n              align = \"center\"\n              \n        />\n           </div>\n        );\n    }\n}\nexport default Donut;","import React, { Component } from 'react';\nimport Bar from './components/Bar';\nimport Heatmap from './components/Heatmap';\nimport Line from './components/Line';\nimport Scatter from './components/Scatter';\nimport Area from './components/Area';\nimport Donut from './components/Donut';\n\nclass App extends Component {\n  render() {\n    return (\n      <div className=\"container\">\n          <Bar/>\n          <Heatmap/>\n          <Line/>\n          <Scatter/>\n          <Area/>\n          <Donut/>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// In production, we register a service worker to serve assets from local cache.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on the \"N+1\" visit to a page, since previously\n// cached resources are updated in the background.\n\n// To learn more about the benefits of this model, read https://goo.gl/KwvDNy.\n// This link also includes instructions on opting out of this behavior.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://goo.gl/SC7cgQ'\n          );\n        });\n      } else {\n        // Is not local host. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the old content will have been purged and\n              // the fresh content will have been added to the cache.\n              // It's the perfect time to display a \"New content is\n              // available; please refresh.\" message in your web app.\n              console.log('New content is available; please refresh.');\n\n              // Execute callback\n              if (config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type').indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}